name: 🚀 CI/CD Pipeline
run-name: 'Pipeline: ${{ github.ref_name }} by @${{ github.actor }}'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  WORKING_DIRECTORY: './calculadora'

jobs:
  # ==========================================
  # 📦 INSTALACIÓN Y VALIDACIÓN
  # ==========================================
  setup:
    name: '📦 Setup & Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'calculadora/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          
      - name: 🔍 Verify installation
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== Node.js version ==="
          node --version
          echo "=== NPM version ==="
          npm --version
          echo "=== Project structure ==="
          ls -la
          echo "=== Source files ==="
          ls -la src/

  # ==========================================
  # 🔍 CALIDAD DE CÓDIGO
  # ==========================================
  quality:
    name: '🔍 Code Quality'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'calculadora/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 📝 TypeScript check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx tsc --noEmit

      - name: 🎨 Prettier check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx prettier --check "src/**/*.ts" "test/**/*.ts"

      - name: 🔍 ESLint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx eslint "{src,apps,libs,test}/**/*.ts" --format=stylish --max-warnings=10

  # ==========================================
  # 🧪 TESTS
  # ==========================================
  test:
    name: '🧪 Tests'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'calculadora/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 🧪 Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test -- --watchAll=false --testTimeout=10000
        env:
          NODE_ENV: test

      - name: 🧪 Run e2e tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:e2e -- --testTimeout=30000
        env:
          NODE_ENV: test

      - name: 📊 Generate coverage
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:cov -- --watchAll=false --testTimeout=10000
        env:
          NODE_ENV: test

  # ==========================================
  # 🏗️ BUILD
  # ==========================================
  build:
    name: '🏗️ Build'
    runs-on: ubuntu-latest
    needs: [quality, test]
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'calculadora/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 🏗️ Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build
          
      - name: 📊 Build analysis
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== Build Output Analysis ==="
          if [ -d "dist" ]; then
            du -sh dist/ || echo "Could not calculate size"
            find dist -name "*.js" | wc -l || echo "Could not count files"
            echo "=== Build completed successfully ==="
          else
            echo "Dist folder not found"
          fi

  # ==========================================
  # 🎯 RESULTADO FINAL
  # ==========================================
  result:
    name: '🎯 Pipeline Result'
    runs-on: ubuntu-latest
    needs: [setup, quality, test, build]
    if: always() && !cancelled()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "## 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Success
        if: needs.setup.result == 'success' && needs.quality.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "🎉 ¡Pipeline ejecutado exitosamente!"
          echo "✅ Setup: PASSED"
          echo "✅ Calidad de código: PASSED"
          echo "✅ Tests: PASSED"
          echo "✅ Build: PASSED"

      - name: ⚠️ Warnings or Failures
        if: needs.setup.result != 'success' || needs.quality.result != 'success' || needs.test.result != 'success' || needs.build.result != 'success'
        run: |
          echo "⚠️ Pipeline completado con advertencias o errores"
          echo "🔍 Revisa los logs de los jobs individuales para más detalles"