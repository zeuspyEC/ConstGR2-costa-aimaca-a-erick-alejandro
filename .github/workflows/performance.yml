name: ⚡ Performance Analysis
run-name: 'Performance: ${{ github.ref_name }} by @${{ github.actor }}'

on:
  push:
    branches: [ main ]
    paths:
      - 'calculadora/src/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'calculadora/src/**'
  schedule:
    # Análisis de rendimiento semanal los domingos a las 2 AM
    - cron: '0 2 * * 0'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  WORKING_DIRECTORY: './calculadora'

jobs:
  # ==========================================
  # 📊 ANÁLISIS DE PERFORMANCE BÁSICO
  # ==========================================
  performance-analysis:
    name: '📊 Performance Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'calculadora/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm ci --prefer-offline --no-audit --no-fund

      - name: 🏗️ Build with performance metrics
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== Build Performance Analysis ==="
          
          # Medir tiempo de build
          time npm run build || echo "Build completed with warnings"
          
          echo "=== Build Output Analysis ==="
          if [ -d "dist" ]; then
            du -sh dist/ || echo "Could not calculate dist size"
            find dist -name "*.js" | wc -l || echo "Could not count JS files"
          else
            echo "Dist directory not found"
          fi

      - name: 🧪 Test performance
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== Test Performance ==="
          
          # Ejecutar tests con métricas de tiempo
          time npm run test -- --verbose --passWithNoTests --watchAll=false

      - name: 📊 Basic analysis
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== Basic Package Analysis ==="
          
          # Análisis básico de dependencias
          echo "=== Dependencies ==="
          npm list --depth=0 || echo "Dependencies listed with warnings"
          
          # Análisis básico de node_modules
          echo "=== Node Modules Size ==="
          if [ -d "node_modules" ]; then
            du -sh node_modules/ || echo "Could not calculate node_modules size"
          fi

      - name: 📊 Create performance report
        run: |
          echo "## ⚡ Performance Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build metrics
          if [ -d "calculadora/dist" ]; then
            dist_size=$(du -sh calculadora/dist 2>/dev/null | cut -f1 || echo "unknown")
            file_count=$(find calculadora/dist -type f 2>/dev/null | wc -l || echo "unknown")
            echo "### 🏗️ Build Metrics" >> $GITHUB_STEP_SUMMARY
            echo "- **Build size:** $dist_size" >> $GITHUB_STEP_SUMMARY
            echo "- **Files generated:** $file_count" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### 📊 Analysis Date" >> $GITHUB_STEP_SUMMARY
          echo "- **Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY