name: 🔒 Security Scan
run-name: 'Security: ${{ github.ref_name }} by @${{ github.actor }}'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar análisis de seguridad cada lunes a las 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  WORKING_DIRECTORY: './calculadora'

jobs:
  # ==========================================
  # 🔍 ANÁLISIS DE DEPENDENCIAS
  # ==========================================
  dependency-scan:
    name: '🔍 Dependency Security Scan'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: 'calculadora/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm ci --prefer-offline --no-audit

      - name: 🔒 NPM Security Audit
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== NPM Security Audit ==="
          npm audit --audit-level=moderate --production
          
          echo "=== NPM Audit Report (JSON) ==="
          npm audit --json --audit-level=moderate --production > audit-report.json || true
          
          # Mostrar resumen del audit
          if [ -f audit-report.json ]; then
            echo "=== Audit Summary ==="
            jq -r '.metadata | "Total vulnerabilities: \(.vulnerabilities.total) | High: \(.vulnerabilities.high) | Moderate: \(.vulnerabilities.moderate) | Low: \(.vulnerabilities.low)"' audit-report.json
          fi

      - name: 📊 Dependency Tree Analysis
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== Dependency Tree ==="
          npm list --depth=0
          
          echo "=== Production Dependencies ==="
          npm list --prod --depth=0
          
          echo "=== Outdated packages ==="
          npm outdated --depth=0 || true

      - name: 🔍 License Check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== License Analysis ==="
          npx license-checker --summary --production --excludePrivatePackages

      - name: 💾 Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: calculadora/audit-report.json
          retention-days: 30

  # ==========================================
  # 🔒 ANÁLISIS DE CÓDIGO
  # ==========================================
  code-scan:
    name: '🔒 Code Security Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: 'calculadora/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm ci --prefer-offline --no-audit

      - name: 🔍 ESLint Security Analysis
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== ESLint Security Rules ==="
          npx eslint "{src,apps,libs,test}/**/*.ts" \
            --format=stylish \
            --cache \
            --no-fix \
            --report-unused-disable-directives || true

      - name: 🔒 TypeScript Security Check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== TypeScript Strict Checks ==="
          npx tsc --noEmit --strict --noImplicitReturns --noUnusedLocals --noUnusedParameters

      - name: 🔍 Code Quality Metrics
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== Code Complexity Analysis ==="
          
          # Contar líneas de código
          echo "Lines of code:"
          find src -name "*.ts" -not -name "*.spec.ts" | xargs wc -l | tail -1
          
          # Archivos más largos
          echo "=== Largest files (potential complexity) ==="
          find src -name "*.ts" -not -name "*.spec.ts" | xargs wc -l | sort -nr | head -5
          
          # Buscar patrones de seguridad problemáticos
          echo "=== Potential Security Patterns ==="
          echo "Searching for potential security issues..."
          
          # Buscar eval() y similares
          if grep -r "eval(" src/ --include="*.ts" 2>/dev/null; then
            echo "⚠️ Found eval() usage - review for security"
          fi
          
          # Buscar innerHTML
          if grep -r "innerHTML" src/ --include="*.ts" 2>/dev/null; then
            echo "⚠️ Found innerHTML usage - review for XSS"
          fi
          
          # Buscar console.log en producción
          if grep -r "console\." src/ --include="*.ts" --exclude="*.spec.ts" 2>/dev/null; then
            echo "⚠️ Found console statements - consider removing for production"
          fi

  # ==========================================
  # 📊 SECURITY SUMMARY
  # ==========================================
  security-summary:
    name: '📊 Security Summary'
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan]
    if: always() && !cancelled()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Create security summary
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Analysis | ${{ needs.code-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.dependency-scan.result }}" == "success" && "${{ needs.code-scan.result }}" == "success" ]]; then
            echo "✅ **All security checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some security checks failed - review the logs above**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ✅ Security scan completed
        if: needs.dependency-scan.result == 'success' && needs.code-scan.result == 'success'
        run: |
          echo "🔒 ¡Análisis de seguridad completado exitosamente!"
          echo "✅ No se encontraron vulnerabilidades críticas"

      - name: ⚠️ Security issues found
        if: needs.dependency-scan.result == 'failure' || needs.code-scan.result == 'failure'
        run: |
          echo "⚠️ Se encontraron problemas de seguridad"
          echo "🔍 Revisa los logs para más detalles"
          echo "📧 Considera actualizar dependencias vulnerables"