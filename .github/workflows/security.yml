name: 🔒 Security Scan
run-name: 'Security: ${{ github.ref_name }} by @${{ github.actor }}'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar análisis de seguridad cada lunes a las 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  WORKING_DIRECTORY: './calculadora'

jobs:
  # ==========================================
  # 🔍 ANÁLISIS DE DEPENDENCIAS
  # ==========================================
  dependency-scan:
    name: '🔍 Dependency Security Scan'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: 'calculadora/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm ci --prefer-offline --no-audit

      - name: 🔒 NPM Security Audit
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== NPM Security Audit ==="
          npm audit --audit-level=moderate --production || echo "Audit completed with warnings"
          
          echo "=== Production Dependencies ==="
          npm list --prod --depth=0 || echo "Dependencies listed with warnings"

      - name: 📊 Dependency Analysis
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== Dependency Tree ==="
          npm list --depth=0 || echo "Listed with warnings"
          
          echo "=== Outdated packages ==="
          npm outdated --depth=0 || echo "No outdated packages or warnings"

  # ==========================================
  # 🔒 ANÁLISIS DE CÓDIGO
  # ==========================================
  code-scan:
    name: '🔒 Code Security Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: 'calculadora/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm ci --prefer-offline --no-audit

      - name: 🔍 ESLint Security Analysis
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== ESLint Security Analysis ==="
          npx eslint "{src,apps,libs,test}/**/*.ts" --format=stylish || echo "ESLint completed with warnings"

      - name: 🔒 TypeScript Security Check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== TypeScript Strict Checks ==="
          npx tsc --noEmit --strict

      - name: 🔍 Basic Security Patterns
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "=== Security Pattern Analysis ==="
          
          # Contar líneas de código
          echo "Lines of TypeScript code:"
          find src -name "*.ts" -not -name "*.spec.ts" | xargs wc -l | tail -1 || echo "No .ts files found"
          
          echo "=== Checking for potential security issues ==="
          
          # Buscar patrones problemáticos básicos
          echo "Checking for eval usage..."
          grep -r "eval(" src/ --include="*.ts" 2>/dev/null || echo "No eval() found ✅"
          
          echo "Checking for innerHTML usage..."
          grep -r "innerHTML" src/ --include="*.ts" 2>/dev/null || echo "No innerHTML found ✅"
          
          echo "Checking for console statements..."
          console_count=$(grep -r "console\." src/ --include="*.ts" --exclude="*.spec.ts" 2>/dev/null | wc -l || echo 0)
          echo "Console statements found: $console_count"

  # ==========================================
  # 📊 SECURITY SUMMARY
  # ==========================================
  security-summary:
    name: '📊 Security Summary'
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan]
    if: always() && !cancelled()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Create security summary
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Analysis | ${{ needs.code-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Security scan result
        run: |
          if [[ "${{ needs.dependency-scan.result }}" == "success" && "${{ needs.code-scan.result }}" == "success" ]]; then
            echo "🔒 ¡Análisis de seguridad completado exitosamente!"
            echo "✅ No se encontraron vulnerabilidades críticas"
          else
            echo "⚠️ Análisis completado con advertencias"
            echo "🔍 Revisa los logs para más detalles"
          fi